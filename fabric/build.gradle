
plugins {
    id("com.github.johnrengelman.shadow") version "5.0.0"
    id("io.github.natanfudge.testmc") version "0.0.1"
}

configurations {
    shadow
}
architectury {
    platformSetupLoomIde()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group


repositories {
    maven { url = "https://dl.bintray.com/shedaniel/cloth" }
    maven {
        url = "https://jitpack.io"
        metadataSources {
            mavenPom()
            artifact()
        }
        content {
            includeGroupByRegex("com.github.Chocohead")
        }
    }
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft("com.mojang:minecraft:$minecraft_version")
    mappings("net.fabricmc:yarn:$yarn_mappings:v2")
    modImplementation("net.fabricmc:fabric-loader:$loader_version")

    // Fabric API. This is technically optional, but you probably want it anyway.
//    modImplementation("net.fabricmc.fabric-api:fabric-api:${prop("fabric_version")}")
    modImplementation("net.fabricmc:dev-launch-injector:0.2.1+build.8")
//    modImplementation("me.shedaniel:architectury:${prop("architectury_version")}:fabric")
    modRuntime("com.github.Chocohead:Data-Breaker-Lower:24be1a2") {
        exclude(module: "fabric-loader")
        exclude(group: "net.fabricmc.fabric-api")
    }


    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")

    testImplementation("net.fabricmc:dev-launch-injector:0.2.1+build.8")

//    modImplementation("net.fabricmc:fabric-language-kotlin:${prop("flk_version")}")

    testImplementation(project(":common"))
    compileOnly(project(path: ":common")) {
        transitive = false
    }
    runtimeOnly(project(path: ":common", configuration: "transformDevelopmentFabric")) {
        transitive = false
    }
    shadow(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property("version", project.version)

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    classifier "shadow"
}

new TestMc(shadowJar, project).configure()

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
    classifier "fabric"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

